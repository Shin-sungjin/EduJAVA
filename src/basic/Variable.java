package basic;

public class Variable {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//주석(Comment) : 프로그램을 작성할 때 프로그램에 영향을 주지 않는 코드 
		// - 주석이 선언된 부분은 실행하지 않는다. = 읽지 않음 = 번역하지 않는다.
		
		// 주석의 본질적 목적
		// 1. 코드에 대한 설명을 적거나 중요한 부분을 필기할 때 사용하는 경우 
		// 2. 현업에서 해당 코드에 대한 설명을 요약하여 다른 개발자에게 가독성을 올려주는 역할. 
		
		// 현업에서는 주석만 잘 달아도 반은 먹고들어감. 
		
		// 변수(Variable) : 변화하는 수(숫자로써 다양한 값이 대입 될 수 있는 수)
		// 흔히 변수는 현실세계의 상자와 비교 가능 
		// ex)상자에 물건을 담더라도, 그 안의 물건의 가치가 바뀌지 않음.
		//    =>변수의 값을 저장한 순간, 갑자기 값이 변하지 않음 
		//     -가공, 재할당으로는 값이 변할 수 있음. (JAVA에서는 재선언 기능은 없음)
		//프로그래밍=입력에 의한 출력 제어 
		
		//정수형 변수 vita 500에 2억이라는 값을 '할당' 했다.
//		int vita500 = 200000000 ; //변수 선언 예시 
//		System.out.println(vita500);
		
		// 상자(변수) 특징
		// 1. 상자에 무엇을 할 수 있나? - "할당(값 넣기)"
		// 2. 상자에 이름이 있었나? - 상자는 고유한 이름을 지정해 주어야 한다.(이름으로 변수 구분)
		// 3. 상자에 들어갈 물건의 종류를 미리 지정해줘야 한다.
		//    ->변수가 받을 값의 타입(형태)를 지줭해 줘야 한다. 
		// 4. 상자는 크기가 다르다. (변수의 타입은 각각 지정된 크기가 있다.)
		
		// 변수의 타입. (데이터 타입= 일반타입(Primitive type) / 참조타입(Wrapper)
		// 데이터 타입 : 변수에 들어갈 데이터의 값의 종류와 범위를 지정하는 것.
		// int, double, boolean, char, long, String  <----자바에서 제공하는 일반타입 종류 (단, Sting은 특별)
		// String ->여러가지의 경우의 수가 존재함, 이 때문에 참조타입에도 속하고, 비교 방식에서도 다른 비교 방식을 이용한다. 
		// 변수를 쓰는 방법. 
		// 타입(자료형),         변수명 (상자이름)             값 (value)
		//   int               vita500           =      200000000;
		
		//변수 사용시 주의사항. 
		//1. 벼니수의 타입은 저장 공간의 한계가 존재한다. 
		//int vita1000= 220000000;
		//2. 변수를 새롭게 선언과 새로운 값을 할당하는 부분의 차이를 명확히 알아야 한다. 
		// 재선언, 재할당 
//		int vita501 = 0;
//		//2-1 재선언   (자바 안됨, 일부허용, 원칙 불가능)
//		// int vita501 = 100000 ;
//		System.out.println(vita501);
//		//2-2 재할당 
//		vita501 = 100000000;
//		System.out.println(vita501);
//		
		//변수의 타입 정리 
		// 1. byte : -128부터 127까지의 범위를 정수를 지정하는 변수. 
		
		//현업에서는 한글 변수명 절대 엄금 ;
		byte 돼지저금통 = 100;
		//타입이 안맞아서 아래와 같이 숫자 10을 byte 타입으로 강제 변환 
		//자바에서는 변수들끼리 연산, 할당시 타입이 다른 경우가 발생.
		//특정한 상황이 아닌 이상 타입을 맞춰 진행할 필요 있음. 
		돼지저금통 = (byte) (돼지저금통 + 10); //여기서 숫자 10은 리터럴 값, 리터럴??
		System.out.println(돼지저금통);
		
		//위에서 얘기한 특정한 상황중 하나는 같은 정수타입끼리는 
		// 작은쪽 -> 큰쪽으로는 타입변환이 불필요. 
		// byte -> int
		int 대왕저금통 = 500;
		int 저금한돈 = 0;
		저금한돈  = 돼지저금통 + 대왕저금통 ;
		System.out.println("내가 지금까지 모은돈은" +저금한돈);
		//같은 정수형 일 경우, 작은 쪽에서 큰 쪽으로 담는 것은 상관 없음 
		// 저금한 돈  =int, 돼지저금통= byte, 대왕적금통 =int
		//저금한돈 = 돼지저금통 도 가능 
		//돼지저금통 = 저금한돈은 불가능, 
		
		//int는 21억 4000개 정도 보관 가능
		
		//가장 큰 값을 저장할 수 있는 정수형 
		//long
		long 개큰저금통 = 10000000000L ;
		
		System.out.println(개큰저금통);
		//long 타입 사용 법
		//접미사 L 필요 
		
		
		//char 문자를 저장하는 변수
		//문자와 문자열의 표기법 차이를 정확히 지킬 것.
		char codename = 'S' ;
		System.out.println(codename);
		//문자 사용 빈도 높음 , 대소문자 변경이나, 여러가지 케이스에 활용된다. 
		//숫자를 넣긴하지만 기본적으로 넣지 않음 
		// 숫자를 넣으면 그에 맞는 아스키 코드로 치환하여 문자 혹은 코드에 맞게 표현
		char chr= 95;  
		System.out.println(chr);   
		
		// char 타입에 문자를 2개이상 쓸수 있는가?
	    // No - 딱 1글자만 허용 
		char codename2 = '신';
		System.out.println(codename2);
		
		//한글자 이상은 문자열(String)!!
		String codename3 = "gunchim" ;
		System.out.println(codename3);
		
		//문자 vs 문자열 차이
		//표기법 상 ' ' <------- 문자표현 
		//        " " <------ 문자열 표현 
		
		
		//실수를 저장하는 변수타입
		//1. float 
		float codenum = 972.4F ; 
		// 2. double
		double codenum2 = 972.4 ;
		System.out.println(codenum);
		System.out.println(codenum2);
		
		
		//** 변수명 사용 규칙 **
		// 1. 공백 불허 
		//    -> 특수문자 _로 대체
		// 2. 예약어(키워드)를 사용해서는 안된다. 
		//   -> 다른 언어의 경우는 허용하는 경우가 있으나, 쓰지 말것. (근데 어차피 자바는 안됌 ㅋ)
		//   true (키워드)  근데 True로 표기하는 경우는 진짜 간혹 있음. 
		// 3. 숫자로 시작하면 안돼 
		// ex) int 9724gunchim = 9724;
			int g9724chim = 9724 ; //첫 글자만 문자라면 숫자는 뒤에 몇개가 와도 상관없음 		
		// 4. 특수문자는 _, $ 만 허용 
		// 5. 대소문자 구분 ---> 대문자, 소문자에 따라서 의미, 값이 달라질 수 있음 
		
		
			
		// 뒤에 있는 행거에서 옷걸이 좀 가져다 주세요 (명령)
		// 컴퓨터와 의사소통 한다고 했을 때 빠진 것
		// 1. 방향
		// 2. 몇번째 옷걸이 
		// 3. 위치
		
	    // 변수명(클래스명) 표기법
		// javaisveryeasy   <- 기준단어
		// 1.파스칼 표기법  [JavaIsVeryEasy]
		//     -> 첫 글자를 대문자로 시작하면서 단어마다 대문자로 표기하는 방법

		// 2.카멜 표기법    [javaIsVeryEasy]    =>자바에서는 카멜 젤 많이 씀
		//		-> 첫글자는 소문자, 단어마다 대문자로 표기하는 방법 

		// 3.스네이크 표기법 [JAVA_IS_VERY_EASY]     =>상수 쓸 때 많이 사용 됌 (일반적으로 대문자 + _ 조합은 상수 표현)
		//		-> 단어 사이사이마다 _(언더바)를 이용해 표기하는 방법 	
		
		//	
		
			
	
			
			
			
	}
}
