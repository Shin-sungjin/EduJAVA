package basic;

public class OperatorExam {
	public static void main(String[] args) {
	
		
//		// 1.기본적인 연산자 
//		// 사칙연산 : +, - /, *
//		// %, ++, -- 
//		
//		//%: 나머지 
//		// 홀짝구분  => 값에 2를 나눠 나머지가 존재하면 홀, 없다면 짝 
//		System.out.println(5%2); 	 
//		System.out.println(20%5);  
//		System.out.println(22%8);  
//		System.out.println(19%4);
//		
//		// 비교 연산자 + 삼항연산자
//		// ==  :
//		//자바에서 =은 할당이라는 의미가 있다. 
//		// -> 단, 문자열 비교시에는 equals 라는 Method를 사용하는 것을 권장. 
//		
//		String test = "집에가고싶지?" ;
//		
//		
//		//두개의 변수가 있다고 가정하고, 
//		// 변수 a를 좌항에 위치시키고, 변수 b를 우항에 위치 시킨 후 비교 
//		// ex) a == b;
//		// a = b : 변수 a에 변수 b의 값을 할당 
//		// a == b: 변수 a와 b가 같은지 비교 
//		//	 -같다면 true 값을 출력, 다르다면 false 라는 값을 출력 
//		// a >= b : a는 b 이상 -> a가 b 보다 크거나 같다면 true ; 
//		// a <= b : a는 b 이하 -> a가 b보다 작거나 같다면 true ; 
//		// a > b : a는 b 초과 - > a가 b보다 크면 true;  
//		// a < b : a는 b 미만 - > a가 b보다 작으면 true ;
//		//true/ false 에 따라 실행되는 결과 값이 다름 (조건문, 반복문에서 사용됨)
//		
//		int a =30;
//		int b =30;
//		System.out.println("a <  b : " + (a<b));
//	    System.out.println("a <= b : " + (a<=b));
//	    System.out.println("a >  b : " + (a>b));
//	    System.out.println("a >= b : " + (a>=b));
//	    System.out.println("a == b : " + (a==b));
//	    System.out.println("a != b : " + (a!=b));  //논리 부정 연산자  !=같지 않다. 괄호 밖에 쓰인다면, 해당 식의 반대로 생각 
//	   
//	    // 논리 연산자 
//	    // 진법
//	    // 10진법
//	    // 1, 2, ,3, 4, 5, 6, 7, 8, 9, 10, 11
//	    
//	    //2진법, 16진법, 8진법
//	    
//	    //2진법 
//	    // 0 , 1 두개의 숫자만으로 수를 표현하는 방법
//	    // 자릿값이 올라감에 따라 2배씩 커지는 구조.
//	    // 0, 1, 10, 11, 100, 101, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111,
//	    
//	    // 2진법 -> 10진법  (진법 변환)
//	    // 2진법 1101을 10진법 변경 
//	    // 1101 = 1 * 2^3 + 1*2^2 +  0 * 2^1 + 1 * 2^0(1)
// 	    //		=   8 	  +   4   +    0     +   1
//	    // 1101 = 13
//	    
//	    // 2진법 쉽게하기!!   2^12 까진 암기해두면 좋음!
//	    //  1101
//	    //  <---
//	    // 8 4 2 1 => 0 제외 하고 더하기! = 8 4 0 1 => 13
//	    //  1  1  1  0  1 0 1 0
//	    // 128 64 32 16 8 4 2 1
//	    
//	    // 8진법 
//	    // 0 1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 17 18 20 21 22
//	    // 257 = 2*8^2 + 5* 8*1 + 7*8^0
//	    //     = 128    +  40    + 7
//	    //     = 175
//	    
//	    // 16진수 
//	    // 10다음은 어떻게 표현?
//	    // 10 - A
//	    // 11 - B
//	    // 12 - C
//	    // 13 - D
//	    // 14 - E
//	    // 15 - F
//	    // 16 - 10
//	    //  2AD = 2*16^2 + 10* 16^1 + 13* 16^0
//	    //   685
//	    
//	    
//	    // AND는 곱셉
//	    // 논리식
//	    // x, y라는 변수를 기준으로 설명 
//	    // 논리식에는  0, 1만 옴. 
//	    // x, y   r
//	    // 0 ,0 = 0
//	    // 0, 1 = 0
//	    // 1, 0 = 0
//	    // 1, 1 = 1
//	    
//	    
//	    // or equal 덧셈
//	    // x y  r
//	    // 0 0  0
//	    // 0 1  1
//	    // 1 0  1
//	    // 1 1  1
//	    
	    
	     int x = 20;  int y = 30;   int z = 40;  //가능, but 가독성 Down, 변수명이 간단하고 쉬울 경우에만 사용 
	     boolean a, b, c, d;
	     if (x<y && y<z)  //and 연산자
	         System.out.println(x+"<"+y+" AND " + y+"<" + z+" = Good");
	     if (x<y || y<z)  
	         System.out.println(x+"<"+y+" OR  " + y+"<" + z+" = Good");
	     a = true;
	     b = c = false;
	     d = a || b && c;
	     System.out.println("a = "+a+ ", b = "+b+ ", c = "+c+", d = "+d);
		
		
		// NOT
	    // 부정
	    // 1 -> 0,  0 -> 1
	    
	     
//			Scanner sc = new Scanner(System.in);
//			
//			int a = sc.nextInt();
//			int b = sc.nextInt();
//			
//			if(a>b) {
//				System.out.println("a가 b보다 크므로 a를 출력합니다. a의 값 :" + a);
//			}
//			else if(a<b) {   //else if가 else보다 확장성이 용이 *확장성: 코드가 언제든지 쉽게 추가 될 수 있어야 한다. 
//				System.out.println("b가 a보다 크므로 b를 출력합니다. b의 값 :" + b);
//			}	    
	     // 삼항연산자
	     // 조건을 간단하게 사용하고 싶을 때 쓰는 연산자.
	     // 현업 개발자들이 너무 좋아함 ㅋㅋㅋ
	     // 조건식 ? 참 일 때 실행되는 값 : 조건이 거짓일 때 실행되는 값 ;
	     // 조심해서 사용하셈 
	     // 간편하지만 가독성이 떨어짐 . 
	     // -하지만 코드라인을 줄일 수 있다는 장점 또한 존재한다.  (사실 이것 때문에 쓰는 것)
	     
		
		//  정처기 시험 통과/ 탈락을 확인하는 코드 
	    // score 값이 60점 이상이면 통과, 미만이면 탈락
	     int score = 61;
	     String grade = (score>=60) ?  "합격" : "불합" ;
		 System.out.println(grade);
		
		// 증감 연산자 
		// 변수 i , j 가 있다고 가정
		// i++ /후위연산자
		// j++ / 전위연산자
		 // 전위, 후이연산자는 꼭 + 만 가능한 것은 아님. (기본적으로 사칙연산)
		
		
		//전위 후위 연산자 예시 
//		int a1 =2, b1 = 0;
//		++a1;
//		b1 = a1;
//		
//		System.out.println("a1++ 실행 후" + b1);
//		System.out.println("a1++ 실행 후" + a1);
		 
		 int num1 = 10, num2 = 20;
		 int result1, result2;
		 
		 result1= ++num1;
		 result2 = num2++;
		 System.out.println(result1);
		 System.out.println(result2);
		 
		 //전위 연산자와 후위 연산자의 차이 
		 //전위 연산자는 선계산 후 결과 처리 
		 // 후위 연산자는 선결과처리 후 계산
		 // 즉 둘의 차이는 변수에 할당시 확인이 가능
		 // 후위연산자를 통해 변수에 할당하면 계산전 값이 할당된다. 
		 
		 System.out.println(result2+10);
		 
	}
}
