package oop;

public class opBasic {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 객체 지향 프로그래밍
		// -> 절차 지향 프로그래밍.
		
		//객체지향
		// -> 차 타이어가 펑크나면 차 바퀴만 바뀌면 그만 
		// 코드가 에러가나면 에러난 부분만 확인
		
		//절차지향
		// ->  차의 타이어가 펑크나면 차 자체를 바꾸는 개념
		// 코드 에러시 처음부터 끝까지 다 확인
		
		// 객체 
		// 현실세계에 존재하는 물질, 사물 등 
		// 
		
		// 객체 지향
		// 객체 중심의 무언가
		
		// 객체 지향 프로그래밍
		// 객체를 중심으로 만드는 프로그램
		// -> 현실세계를 기반하여 가상세계를 통해 현실세계에 이득을 주는 프로그래밍.
		
		
		// 객체 자체를 정의하고 활용할 수 있어야 한다. 
		// 객체를 개념적인 접근 
		// ex) 책을 객체로 표현 
		// 
		
		//객체 지향 언어를 쓰는 이유 
		// 1. 코드의 재 사용성이 매우 높다. 
		//   - 이미 써둔 코드 또 쓸겨 
		// 2.관리 자체가 편함
		//  -코드간 직-간접적 관계를 맺어 줌으로써
		//   보다 적은 노력으로 코드 변경 필요 
		// 3. 보안, 신뢰성(캡슐화)
		
		
		// 객체를 정의하고 
		// 객체의 속성과 행동을 나눠보기 .
		// 속성 - 객체가 가지고 있는 특성.
		// 행동 - 객체가 할 수 있는 무언가.
		//
		// 첫 속성, 행동 정의시 떠오르는 것만 하고 넘어간 후, 
		// 추가적으로 생각 날 때마다 추가하기
		
		// 컵
		// 속성 - 색상, 종류, 크기, 무게
		// 행동 - 마신다 (마셔진다), 무언가 담는다(다른 객체에 의해)
		
		//리모컨
		// 속성 - 생상, 종류
		// 행동 - 킨다, 끈다
		
		//컴퓨터, 개, 대학교,  
		// 컴퓨터
		// 속성 - 색상, 종료, 크기, 무게, 
		// 행동 - 키보드를 누른다. 신호를 보낸다. 화면을 본다. 
		
		// 개
		// 속성 - 색상, 견종, 생김새
		// 행동 - 짖다, 먹는다. 잔다. 걷는다. 
		
		//대학교
		// 속성 - 색깔, 건물 구조, 비상벨 시스템, 계단 갯수
		// 행동 - 학생들이 돌아다닌다. 행정서비스를 처리한다. 
		//
		
		// 조준모
		// 속성 - 흡연자다. 개발실력이 뛰어나다. 눈이 좋지 않다. 핀볼을 좋아한다.
		// 행동 - 강의를 한다. 물을 마신다. 흡연을 한다. 밥을 먹는다. 술을 마신다. 운전을 한다. 옷을 입고 벋는다. 
	
		// 속성과 행동을 프로그래밍에서는 어떻게 표현하는가?
		// 속성 - 변수
		// 행동 - Method
		// 클래스- 객체를 제작하는 도구 (틀)
		
		// 클래스와 객체의 관계
		// 기아 자동차 공장 = 클래스 
		// 공장에서 만들어지는 차 - 객체/
		
		
		// 클래스 -객체를 만드는 도면, 청사진, 설계도
		// 객체 = 클래스를 통해 만들어진다. 
		// 클래스를 통해 생성된 객체를 인스턴스라고 부른다.
		
		// 객체: 선풍기
		// 속성 : 브랜드, 색상, 날개, 
		// 행동 : 바람 on / off, 회전, 
		
		// 행동 정의시 꼭 , 사람만이 가지고 무언갈 할 수 있는 것만이ㅏ 아님, 
		// 
		
	
	
	
	
	}

}
